{"version":3,"sources":["Components/Sample/OlMapSample.js","Components/Sample/ComponentSample.js","App.js","serviceWorker.js","index.js"],"names":["OlMapSample","useEffect","initView","View","center","zoom","positionFeature","Feature","pfStyle","Style","image","Circle","radius","fill","Fill","color","stroke","Stroke","width","setStyle","geolocation","Geolocation","trackingOptions","enableHighAccuracy","projection","getProjection","tempVectorSource","VectorSource","features","tempVectorLayer","VectorLayer","source","heatMapVectorLayer","HeatmapLayer","blur","parseInt","weight","feature","Map","target","layers","TileLayer","OSM","view","on","coordinates","getPosition","_pf","setGeometry","Point","setCenter","addFeature","setTracking","init","id","style","window","innerWidth","height","innerHeight","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iVAae,SAASA,IA6EtB,OA5EAC,qBAAU,YACR,WACE,IAAIC,EAAW,IAAIC,IAAK,CACtBC,OAAQ,CAAC,GAAI,KACbC,KAAM,IAGJC,EAAkB,IAAIC,IACtBC,EAAU,IAAIC,IAAM,CACtBC,MAAO,IAAIC,IAAO,CAChBC,OAAQ,EACRC,KAAM,IAAIC,IAAK,CACbC,MAAO,YAETC,OAAQ,IAAIC,IAAO,CACjBF,MAAO,OACPG,MAAO,QAIbZ,EAAgBa,SAASX,GAEzB,IAAIY,EAAc,IAAIC,IAAY,CAChCC,gBAAiB,CACfC,oBAAoB,GAEtBC,WAAYtB,EAASuB,kBAGnBC,EAAmB,IAAIC,IAAa,CACtCC,SAAU,CAACtB,KAGTuB,EAAkB,IAAIC,IAAY,CACpCC,OAAQL,IAGNM,EAAqB,IAAIC,IAAa,CACxCF,OAAQL,EACRQ,KAAMC,SAAS,EAAG,IAClBvB,OAAQuB,SAAS,GAAI,IACrBC,OAAQ,SAASC,GACf,MAAO,MAID,IAAIC,IAAI,CAChBC,OAAQ,MACRC,OAAQ,CACN,IAAIC,IAAU,CACZV,OAAQ,IAAIW,MAGdV,EACAH,GAEFc,KAAMzC,IAGRkB,EAAYwB,GAAG,mBAAmB,WAChC,IAAIC,EAAczB,EAAY0B,cAC9B,GAAID,EAAa,CACf,IAAIE,EAAM,IAAIxC,IACdwC,EAAI5B,SAASX,GACbuC,EAAIC,YAAYH,EAAc,IAAII,IAAMJ,GAAe,MACvD3C,EAASgD,UAAUL,GAEnBnB,EAAiByB,WAAWJ,OAGhC3B,EAAYgC,aAAY,GAG1BC,KACC,IAGD,yBACEC,GAAG,MACHC,MAAO,CAAErC,MAAOsC,OAAOC,WAAYC,OAAQF,OAAOG,e,oCCtFdC,YCI3BC,MARf,WACE,OACE,6BACE,kBAAC7D,EAAD,QCMc8D,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f12aabc.chunk.js","sourcesContent":["import { Feature, Geolocation } from \"ol\";\nimport { Circle, Fill, Stroke, Style } from \"ol/style\";\nimport Point from \"ol/geom/Point\";\nimport TileLayer from \"ol/layer/Tile\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport Map from \"ol/Map\";\nimport OSM from \"ol/source/OSM\";\nimport VectorSource from \"ol/source/Vector\";\nimport View from \"ol/View\";\nimport React, { useEffect, useState } from \"react\";\nimport { Heatmap as HeatmapLayer } from \"ol/layer\";\nimport \"ol/ol.css\";\n\nexport default function OlMapSample() {\n  useEffect(() => {\n    function init() {\n      let initView = new View({\n        center: [36, 127],\n        zoom: 5,\n      });\n\n      var positionFeature = new Feature();\n      let pfStyle = new Style({\n        image: new Circle({\n          radius: 3,\n          fill: new Fill({\n            color: \"#3399CC\",\n          }),\n          stroke: new Stroke({\n            color: \"#fff\",\n            width: 1,\n          }),\n        }),\n      });\n      positionFeature.setStyle(pfStyle);\n\n      let geolocation = new Geolocation({\n        trackingOptions: {\n          enableHighAccuracy: false,\n        },\n        projection: initView.getProjection(),\n      });\n\n      let tempVectorSource = new VectorSource({\n        features: [positionFeature],\n      });\n\n      let tempVectorLayer = new VectorLayer({\n        source: tempVectorSource,\n      });\n\n      var heatMapVectorLayer = new HeatmapLayer({\n        source: tempVectorSource,\n        blur: parseInt(5, 10),\n        radius: parseInt(15, 10),\n        weight: function(feature) {\n          return 0.1;\n        }\n      });\n\n      let map = new Map({\n        target: \"map\",\n        layers: [\n          new TileLayer({\n            source: new OSM(),\n          }),\n          \n          heatMapVectorLayer,\n          tempVectorLayer,\n        ],\n        view: initView,\n      });\n\n      geolocation.on(\"change:position\", function () {\n        var coordinates = geolocation.getPosition();\n        if (coordinates) {\n          let _pf = new Feature();\n          _pf.setStyle(pfStyle);\n          _pf.setGeometry(coordinates ? new Point(coordinates) : null);\n          initView.setCenter(coordinates);\n\n          tempVectorSource.addFeature(_pf);\n        }\n      });\n      geolocation.setTracking(true);\n    }\n\n    init();\n  }, []);\n\n  return (\n    <div\n      id=\"map\"\n      style={{ width: window.innerWidth, height: window.innerHeight }}\n    ></div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport 'ol/ol.css';\n\nexport default class ComponentMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { center: [0, 0], zoom: 1 };\n\n    this.olmap = new Map({\n      target: null,\n      layers: [\n        new TileLayer({\n          source: new OSM()\n        })\n      ],\n      view: new View({\n        center: this.state.center,\n        zoom: this.state.zoom\n      })\n    });\n  }\n\n  updateMap() {\n    this.olmap.getView().setCenter(this.state.center);\n    this.olmap.getView().setZoom(this.state.zoom);\n  }\n\n  componentDidMount() {\n    this.olmap.setTarget(\"map\");\n\n    // Listen to map changes\n    this.olmap.on(\"moveend\", () => {\n      let center = this.olmap.getView().getCenter();\n      let zoom = this.olmap.getView().getZoom();\n      this.setState({ center, zoom });\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let center = this.olmap.getView().getCenter();\n    let zoom = this.olmap.getView().getZoom();\n    if (center === nextState.center && zoom === nextState.zoom) return false;\n    return true;\n  }\n\n  userAction() {\n    this.setState({ center: [546000, 6868000], zoom: 5 });\n  }\n\n  render() {\n    this.updateMap(); // Update map on render?\n    return (\n      <div id=\"map\" style={{ width: \"100%\", height: \"360px\" }}>\n        <button onClick={e => this.userAction()}>setState on click</button>\n      </div>\n    );\n  }\n}\n\n","import React from \"react\";\nimport { ComponentMap, OlMapSample } from \"./Components\";\n\nfunction App() {\n  return (\n    <div>\n      <OlMapSample></OlMapSample>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}