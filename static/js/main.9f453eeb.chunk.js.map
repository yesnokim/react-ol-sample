{"version":3,"sources":["Components/Sample/OlMapSample.js","Components/Sample/ComponentSample.js","App.js","serviceWorker.js","index.js"],"names":["OlMapSample","useState","zoom","setZoom","center","setCenter","Map","target","layers","TileLayer","source","OSM","view","View","map","setMap","useEffect","updateMap","console","log","setTarget","on","onMoveend","getView","getCenter","getZoom","Fragment","id","style","width","height","ComponentMap","props","state","olmap","this","setState","nextProps","nextState","onClick","e","userAction","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2PAMe,SAASA,IAAe,IAAD,EACZC,mBAAS,GADG,mBAC7BC,EAD6B,KACvBC,EADuB,OAERF,mBAAS,CAAC,EAAG,IAFL,mBAE7BG,EAF6B,KAErBC,EAFqB,OAIdJ,mBACpB,IAAIK,IAAI,CACNC,OAAQ,KACRC,OAAQ,CACN,IAAIC,IAAU,CACZC,OAAQ,IAAIC,OAGhBC,KAAM,IAAIC,IAAK,CACbT,OAAQA,EACRF,KAAMA,OAdwB,mBAI7BY,EAJ6B,KAIxBC,EAJwB,KAmBpCC,qBAAU,WACRC,MACC,CAACf,EAAME,IAEVY,qBAAU,WAIR,OAHAE,QAAQC,IAAIL,GACZA,EAAIM,UAAU,OACdN,EAAIO,GAAG,UAAWC,GACX,WACLP,EAAO,SAER,IAEH,IAAIO,EAAY,WACdJ,QAAQC,IAAI,aACZd,EAAUS,EAAIS,UAAUC,aACxBrB,EAAQW,EAAIS,UAAUE,YAGpBR,EAAY,WACdC,QAAQC,IAAI,cAAef,EAAQF,GACnCY,EAAIS,UAAUlB,UAAUD,GACxBU,EAAIS,UAAUpB,QAAQD,IAGxB,OACE,kBAAC,IAAMwB,SAAP,KACE,yBAAKC,GAAG,MAAMC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,WAC9C,uD,oCC/CeC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CAAE7B,OAAQ,CAAC,EAAG,GAAIF,KAAM,GAErC,EAAKgC,MAAQ,IAAI5B,IAAI,CACnBC,OAAQ,KACRC,OAAQ,CACN,IAAIC,IAAU,CACZC,OAAQ,IAAIC,OAGhBC,KAAM,IAAIC,IAAK,CACbT,OAAQ,EAAK6B,MAAM7B,OACnBF,KAAM,EAAK+B,MAAM/B,SAdJ,E,wDAoBjBiC,KAAKD,MAAMX,UAAUlB,UAAU8B,KAAKF,MAAM7B,QAC1C+B,KAAKD,MAAMX,UAAUpB,QAAQgC,KAAKF,MAAM/B,Q,0CAGrB,IAAD,OAClBiC,KAAKD,MAAMd,UAAU,OAGrBe,KAAKD,MAAMb,GAAG,WAAW,WACvB,IAAIjB,EAAS,EAAK8B,MAAMX,UAAUC,YAC9BtB,EAAO,EAAKgC,MAAMX,UAAUE,UAChC,EAAKW,SAAS,CAAEhC,SAAQF,c,4CAINmC,EAAWC,GAC/B,IAAIlC,EAAS+B,KAAKD,MAAMX,UAAUC,YAC9BtB,EAAOiC,KAAKD,MAAMX,UAAUE,UAChC,OAAIrB,IAAWkC,EAAUlC,QAAUF,IAASoC,EAAUpC,O,mCAKtDiC,KAAKC,SAAS,CAAEhC,OAAQ,CAAC,MAAQ,QAAUF,KAAM,M,+BAGzC,IAAD,OAEP,OADAiC,KAAKlB,YAEH,yBAAKU,GAAG,MAAMC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UAC5C,4BAAQS,QAAS,SAAAC,GAAC,OAAI,EAAKC,eAA3B,0B,GAnDkCC,aCS3BC,MAXf,WACE,OACE,6BACE,iDACA,kBAAC3C,EAAD,MACA,kDACA,kBAAC,EAAD,QCEc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.9f453eeb.chunk.js","sourcesContent":["import Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\nimport React, { useEffect, useState } from \"react\";\n\nexport default function OlMapSample() {\n  const [zoom, setZoom] = useState(5);\n  const [center, setCenter] = useState([0, 0]);\n\n  const [map, setMap] = useState(\n    new Map({\n      target: null,\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n        }),\n      ],\n      view: new View({\n        center: center,\n        zoom: zoom,\n      }),\n    })\n  );\n\n  useEffect(() => {\n    updateMap();\n  }, [zoom, center]);\n\n  useEffect(() => {\n    console.log(map);\n    map.setTarget(\"map\");\n    map.on(\"moveend\", onMoveend);\n    return () => {\n      setMap(null);\n    };\n  }, []);\n\n  let onMoveend = () => {\n    console.log(\"onMoveend\");\n    setCenter(map.getView().getCenter());\n    setZoom(map.getView().getZoom());\n  };\n\n  let updateMap = () => {\n    console.log(\"updateMap()\", center, zoom);\n    map.getView().setCenter(center);\n    map.getView().setZoom(zoom);\n  };\n\n  return (\n    <React.Fragment>\n      <div id=\"map\" style={{ width: \"100%\", height: \"400px\" }}></div>\n      <span>OpenLayer map sample</span>\n    </React.Fragment>\n  );\n}\n","import React, { Component } from \"react\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport TileLayer from \"ol/layer/Tile\";\nimport OSM from \"ol/source/OSM\";\n\nexport default class ComponentMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { center: [0, 0], zoom: 1 };\n\n    this.olmap = new Map({\n      target: null,\n      layers: [\n        new TileLayer({\n          source: new OSM()\n        })\n      ],\n      view: new View({\n        center: this.state.center,\n        zoom: this.state.zoom\n      })\n    });\n  }\n\n  updateMap() {\n    this.olmap.getView().setCenter(this.state.center);\n    this.olmap.getView().setZoom(this.state.zoom);\n  }\n\n  componentDidMount() {\n    this.olmap.setTarget(\"map\");\n\n    // Listen to map changes\n    this.olmap.on(\"moveend\", () => {\n      let center = this.olmap.getView().getCenter();\n      let zoom = this.olmap.getView().getZoom();\n      this.setState({ center, zoom });\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let center = this.olmap.getView().getCenter();\n    let zoom = this.olmap.getView().getZoom();\n    if (center === nextState.center && zoom === nextState.zoom) return false;\n    return true;\n  }\n\n  userAction() {\n    this.setState({ center: [546000, 6868000], zoom: 5 });\n  }\n\n  render() {\n    this.updateMap(); // Update map on render?\n    return (\n      <div id=\"map\" style={{ width: \"100%\", height: \"360px\" }}>\n        <button onClick={e => this.userAction()}>setState on click</button>\n      </div>\n    );\n  }\n}\n\n","import React from \"react\";\nimport { OlMapSample } from \"./Components\";\nimport ComponentMap from \"./Components/Sample/ComponentSample\";\n\nfunction App() {\n  return (\n    <div>\n      <span>Function Sample</span>\n      <OlMapSample></OlMapSample>\n      <span>Component Sample</span>\n      <ComponentMap></ComponentMap>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}